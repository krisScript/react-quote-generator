{"version":3,"sources":["getData.js","getRandomNum.js","App.js","serviceWorker.js","index.js"],"names":["getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","responseData","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","stop","_x","apply","this","arguments","getRandomNum","max","minNum","Math","ceil","maxNum","floor","random","App","_useState","useState","_useState2","slicedToArray","quotes","setQuotes","_useState3","_useState4","quote","setQuote","useEffect","then","data","randomNum","length","catch","err","console","log","react_default","createElement","className","id","concat","author","onClick","href","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c002d535.chunk.js","sourcesContent":["const getData = async url => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const responseData = response.json();\r\n    return responseData;\r\n  } catch (err) {}\r\n};\r\nexport default getData;\r\n","const getRandomNum = max => {\r\n  const minNum = Math.ceil(1);\r\n  const maxNum = Math.floor(max);\r\n  return Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum;\r\n};\r\nexport default getRandomNum;\r\n","import React, { useState, useEffect } from 'react';\nimport getData from './getData';\nimport getRandomNum from './getRandomNum';\nimport './App.scss';\n\nconst App = () => {\n  const [quotes, setQuotes] = useState(null);\n  const [quote, setQuote] = useState('');\n  const changeQuote = () => {\n    const randomNum = getRandomNum(quotes.length - 1);\n    setQuote(quotes[randomNum]);\n  };\n  useEffect(() => {\n    const url =\n      'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n    getData(url)\n      .then(data => {\n        setQuotes(data.quotes);\n        const randomNum = getRandomNum(data.quotes.length - 1);\n        setQuote(data.quotes[randomNum]);\n      })\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <main className=\"main-container\">\n      <div id=\"quote-box\">\n        <div className=\"quote-container\">\n          <h1 id=\"text\">{quote ? quote.quote : 'Loading...'}</h1>\n          <h2 id=\"author\">{quote ? `- ${quote.author}` : ''}</h2>\n        </div>\n        <div className=\"buttons-container\">\n          <button className=\"button\" onClick={changeQuote} id=\"new-quote\">\n            New Quote\n          </button>\n          <a\n            className=\"button\"\n            id=\"tweet-quote\"\n            href={`https://twitter.com/intent/tweet?text=${quote.quote}-${\n              quote.author\n            }`}\n            target=\"_blank\"\n          >\n            Tweet Quote\n          </a>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}